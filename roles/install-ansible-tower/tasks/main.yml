---
- name: install epel repo
  yum: name=epel-release state=present

- name: install dependencies
  yum: name={{ item }} state=present
  with_items:
   - wget
   - python-pip

- name: install python pexpect
  command: pip install pexpect

- name: check if ansible tower is already installed and running
  shell: ps ax | grep -v "grep" | grep "tower-manage run_socketio_service"
  register: ansible_tower_present

- name: download ansible tower (if necessary)
  command: wget http://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.0.0.tar.gz
  when: (ansible_tower_present.stdout == '')

- name: extract ansible tower
  command: tar -xvf ansible-tower-setup-3.0.0.tar.gz
  when: (ansible_tower_present.stdout == '')

- name: configure ansible tower
  shell: >
    cd ansible-tower-setup-3.0.0;
    sed -i "s/admin_password=''/admin_password='admin'/g" inventory;
    sed -i "s/redis_password=''/redis_password='admin'/g" inventory;
    sed -i "s/pg_password=''/pg_password='awx'/g" inventory
  when: (ansible_tower_present.stdout == '')

- name: set up ansible tower
  shell: >
    cd ansible-tower-setup-3.0.0;
    ./setup.sh
  when: (ansible_tower_present.stdout == '')

- name: generate ssh key
  user: name=root generate_ssh_key=yes

- name: install ansible tower cli
  command: pip install ansible-tower-cli

- name: set ansible tower cli config
  shell: >
    tower-cli config host localhost;
    tower-cli config username admin;
    tower-cli config password admin;
    tower-cli config verify_ssl false

- name: copy AWS private key to VM
  copy: src="{{ aws_private_key_file }}" dest=/root/aws.pem

- name: copy OS private key to VM
  copy: src="{{ os_private_key_file }}" dest=/root/os.pem

- name: add credential for AWS API
  command: tower-cli credential create --name AWS-DEMO-API --description "AWS API Credentials" --kind aws --username {{ aws_access_key }} --password {{ aws_secret_key }} --organization Default

- name: add credential for AWS key pair
  command: tower-cli credential create --name AWS-DEMO-KEY-PAIR --description "AWS SSH key pair" --kind ssh --username opnfv --password "" --ssh-key-data /root/aws.pem --organization Default

- name: add credential for OpenStack API
  command: tower-cli credential create --name OS-DEMO-LOGIN --description "OS Login" --kind openstack --host {{ os_auth_url }}  --username admin --password {{ os_admin_password }} --organization Default --project admin

- name: add credential for OpenStack key pair
  command: tower-cli credential create --name OS-DEMO-KEY-PAIR --description "SSH key pair" --kind ssh --username opnfv --password "" --ssh-key-data /root/os.pem --organization Default

- name: create demo project
  command: tower-cli project create --name "OPNFV-demo" --description "Project for OPNFV Summit 2016 ManageIQ demo" --scm-type git --scm-url "https://github.com/atyronesmith/OPNFV-demo-ansible.git" --scm-clean true --scm-delete-on-update true --scm-update-on-launch true

- name: create AWS inventory
  command: tower-cli inventory create --name "AWS-DEMO" --description "Inventory of AWS Demo instances" --organization Default

- name: create AWS inventory group
  command: tower-cli group create --name "AWS-DEMO-GROUP" --inventory "AWS-DEMO" --credential "AWS-DEMO-API" --source ec2

- name: create OpenStack inventory
  command: tower-cli inventory create --name "OS-DEMO-INVENTORY" --description "Inventory of OpenStack instances" --organization Default

- name: create OpenStack inventory group
  command: tower-cli group create --name "OS-DEMO-GROUP" --inventory "OS-DEMO-INVENTORY" --credential "OS-DEMO-LOGIN" --source openstack

- name: create OpenStack (client) job template
  command: tower-cli job_template create --name OPNFV-demo-client --description "All clients tasks" --job-type run --inventory "OS-DEMO-INVENTORY" --project "OPNFV-demo" --playbook cr-vpn-clients.yml --machine-credential "OS-DEMO-KEY-PAIR"

- name: create AWS (server) job template
  command: tower-cli job_template create --name OPNFV-demo-server --description "All server tasks" --job-type run --inventory "AWS-DEMO" --project "OPNFV-demo" --playbook cr-vpn-servers.yml --machine-credential "AWS-DEMO-KEY-PAIR"

- name: remove AWS key from VM file system
  file: name=/root/aws.pem state=absent

- name: remove OS key from VM file system
  file: name=/root/os.pem state=absent
